const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const TOKEN = process.env.TELEGRAM_BOT_TOKEN || "7928500614:AAGl0v_uidAUp1dGsn98kQTJbFOCDW6ZGVA";
let WEB_APP_URL = process.env.WEB_APP_URL || `https://watertrackerapp.onrender.com/login`

const bot = new TelegramBot(TOKEN, { polling: true });

const MONGODB_URI = "mongodb+srv://kohan3750:Data@cluster0.vdi3teq.mongodb.net/WaterDB?retryWrites=true&w=majority&appName=Cluster0"

if (!MONGODB_URI) {
  throw new Error("Please define the MONGODB_URI environment variable")
}

let isConnected = false

async function connectMongo() {
  if (isConnected) return
  try {
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    isConnected = true
    console.log("Connected to MongoDB")
  } catch (error) {
    console.error("MongoDB connection error:", error)
  }
}
connectMongo()

const UserSchema = new mongoose.Schema({
  chatId: { type: Number},
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  age: {type: Number, default: 18 },
  gender: String,
  time: {
    wakeUp: Date, 
    sleepTime: Date,
  },
  weight: {type: Number, default: 0 },
  height: {type: Number, default: 0 },
  goal: {type: Number, default: 2000},
  waterTracker: [{ amount: Number, date: Date }],

});

const User = mongoose.model('User', UserSchema);


bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  WEB_APP_URL = process.env.WEB_APP_URL || `https://watertrackerapp.onrender.com/login/${chatId}/`
  try {
    bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø Water Tracker Bot. –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø–∏—Ç–∏ –≤–æ–¥—É —â–æ–≥–æ–¥–∏–Ω–∏!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
  }
});
bot.onText(/\/support/, async (msg) => {
  const chatId = msg.chat.id;
    bot.sendMessage(chatId, `–í —Ç–µ–±–µ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –Ω–∞—à–∏–º –∑–∞—Å—Ç–æ—Å—É–Ω–∫–æ–º? /n @ivan_kohan_60`);
  
});
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, chatId);

  }
);

// –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
setInterval(async () => {
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000); 
  try {
    const usersToNotify = await User.find({
      $or: [
        { "waterTracker.0": { $exists: false } }, // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
        {
          "waterTracker.date": {
            $lt: oneHourAgo, // –û—Å—Ç–∞–Ω–Ω—î —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –≤–æ–¥–∏ –±—É–ª–æ –±—ñ–ª—å—à–µ –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É
          },
        },
      ],
    });
    for (const user of usersToNotify) {
      bot.sendMessage(user.chatId, 'üíß –ù–µ –∑–∞–±—É–¥—å –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏!');
      user.lastDrinkTime = new Date();
      await user.save();
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error.message);
  }
}, 60 * 60 * 1000); 

async function setMenuButton() {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${TOKEN}/setChatMenuButton`, {
      menu_button: {
        type: 'web_app',
        text: 'üíß Start',
        web_app: {
          url: WEB_APP_URL
        }
      }
    });
    console.log('‚úÖ Menu button configured:', response.data);
  } catch (error) {
    console.error('‚ùå Error configuring menu button:', error.message);
  }
}

setMenuButton();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
module.exports = bot;