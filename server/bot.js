const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const TOKEN = process.env.TELEGRAM_BOT_TOKEN || "7928500614:AAGl0v_uidAUp1dGsn98kQTJbFOCDW6ZGVA";
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://watertrackerapp.onrender.com/login';
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/watertracker';

const bot = new TelegramBot(TOKEN, { polling: true });

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
  .catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));

// –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userSchema = new mongoose.Schema({
  chatId: { type: String, required: true, unique: true },
  lastDrinkTime: { type: Date, default: null }
});

const User = mongoose.model('User', userSchema);

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
    let user = await User.findOne({ chatId });
    if (!user) {
      user = new User({ chatId });
      await user.save();
    }

    bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø Water Tracker Bot. –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –ø–∏—Ç–∏ –≤–æ–¥—É —â–æ–≥–æ–¥–∏–Ω–∏!');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
  }
});

// –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
setInterval(async () => {
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000); // –ß–∞—Å –≥–æ–¥–∏–Ω—É –Ω–∞–∑–∞–¥

  try {
    // –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–µ –ø–∏–ª–∏ –≤–æ–¥—É –±—ñ–ª—å—à–µ –≥–æ–¥–∏–Ω–∏
    const usersToNotify = await User.find({
      $or: [
        { lastDrinkTime: null },
        { lastDrinkTime: { $lt: oneHourAgo } }
      ]
    });

    // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    for (const user of usersToNotify) {
      bot.sendMessage(user.chatId, 'üíß –ù–µ –∑–∞–±—É–¥—å –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏!');
      // –û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
      user.lastDrinkTime = new Date();
      await user.save();
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error.message);
  }
}, 60 * 60 * 1000); // –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async function setMenuButton() {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${TOKEN}/setChatMenuButton`, {
      menu_button: {
        type: 'web_app',
        text: 'üíß Start',
        web_app: {
          url: WEB_APP_URL
        }
      }
    });
    console.log('‚úÖ Menu button configured:', response.data);
  } catch (error) {
    console.error('‚ùå Error configuring menu button:', error.message);
  }
}

setMenuButton();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
